#!/usr/bin/env ruby

begin
  require 'epicify'
rescue LoadError
  require 'rubygems'
  require 'epicify'
end

require 'optparse'
require 'ostruct'

$options = OpenStruct.new
$options.verbose = false

optparse = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
  opts.on('-v', 'be verbose') do
    $options.verbose = true
  end
  opts.on("-p N", Integer, "run against a specific project id") do |n|
    $options.project_id = n
  end
end

optparse.parse!

def log message
  if $options.verbose
    puts message
  end
end

class PutsLogger

  def log message

    if $options.verbose
      puts message
    end

  end

end

class Main

  def run

    if !$options.project_id.nil?
      _process_project $options.project_id
      return
    end

    _get_active_project_ids().each do |active_project_id|
      _process_project active_project_id
    end

  end

  private

    def _asana_adapter
      @asana_adapter ||= Epicify::AsanaAdapter.new(ENV["EPICIFY_ASANA_API_KEY"], PutsLogger.new)
    end

    def _get_active_project_ids
      _asana_adapter.get_projects().select{|x|
        x["name"] =~ Epicify::Entity::Project::ACTIVE_NAME_REGEX
      }.map{|x| x["id"]}
    end

    def _process_project project_id
      log "processing #{project_id}"

      return if ! project_data = _asana_adapter.get_tasks_for_project(project_id)

      tasks_cache = Epicify::ProjectTasksCache.new(".asana_project_tasks_cache", project_id)

      if tasks_cache.previously_cached_data_matches?(project_data)
        log "Previously cached tasks data matches.  No need to process project."
        return
      else
        log "New data does not match previously cached data.  Updating cache and proceeding with processing"
        tasks_cache.set(project_data)
      end

      project = Epicify::Entity::Project.create_project_from_data(project_data)
      updater = Epicify::AsanaProjectUpdater.new(project, _asana_adapter)
      updater.update()

    end

end

Main.new.run()
